#!/usr/bin/env python3
"""Weight graph according to accessib values """

import argparse
import time
import os
from os.path import join as pjoin
import inspect

import sys
import numpy as np
from itertools import product
import matplotlib; matplotlib.use('Agg')
import matplotlib.pyplot as plt
from datetime import datetime
import xnet
import pandas as pd

#############################################################
def info(*args):
    pref = datetime.now().strftime('[%y%m%d %H:%M:%S]')
    print(pref, *args, file=sys.stdout)

##########################################################
def main():
    info(inspect.stack()[0][3] + '()')
    t0 = time.time()
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--accessibs', required=True, help='Accessibs generated by CVAccessibility')
    parser.add_argument('--xnet', required=True, help='Accessibs generated by CVAccessibility')
    parser.add_argument('--outpath', help='Output path')
    args = parser.parse_args()

    if args.outpath == None:
        suff = os.path.splitext(args.accessibs)[0]
        outpath = pjoin('/tmp/', 'w{}.xnet'.format(os.path.basename(suff)))
    else:
        outpath = args.outpath

    accessib = 10
    accs = np.array(open(args.accessibs).read().strip().split('\n')).astype(float)

    g = xnet.xnet2igraph(args.xnet)
    for i in range(g.vcount()):
        if i % 1000 == 0: info('i:{}'.format(i))
        inds = g.neighbors(i, mode='out')
        acc = accs[inds] / np.sum(accs[inds])
        for j, idx in enumerate(inds):
            eid = g.get_eid(i, idx)
            g.es[eid]['weight'] = acc[j]

    xnet.igraph2xnet(g, outpath)

    with open(outpath) as fh:
        content = fh.read()
        assert ('edges weighted' in content) == True

    info('Please check {}'.format(outpath))
    info('Elapsed time:{}'.format(time.time()-t0))

##########################################################
if __name__ == "__main__":
    main()
