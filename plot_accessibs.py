#!/usr/bin/env python3
"""Accessibility from a map

python plot_accessibs.py --graphml ~/results/graffiti/20200202-types/sp.graphml --accessibs /tmp/out/accessibility.txt

"""

import argparse
import logging
import time
from os.path import join as pjoin
from logging import debug, info
import igraph
import xnet
import subprocess
import shlex
import numpy as np
import os

##########################################################
def main():
    t0 = time.time()
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--accessibs', required=True, help='Accessibs generated by CVAccessibility')
    parser.add_argument('--graphml', required=True, help='Graph')
    parser.add_argument('--outdir', default='/tmp/out/', help='outdir')
    args = parser.parse_args()
    
    if not os.path.isdir(args.outdir): os.mkdir(args.outdir)
    
    logging.basicConfig(format='[%(asctime)s] %(message)s',
    datefmt='%Y%m%d %H:%M', level=logging.INFO)

    info('Reading graph')
    g = igraph.Graph.Read(args.graphml)

    info('Reading accessibs'.format(args.accessibs))
    with open(args.accessibs) as fh:
        aux = fh.read().strip().split('\n')
        acc = np.array([float(a) for a in aux])

    g.simplify()
    g.to_undirected()

    visual = dict(
        bbox = (1200, 1200),
        vertex_size = 1.5,
        vertex_shape = 'circle',
        vertex_frame_width = 0,
        edge_arrow_width=.5,
        edge_arrow_size=.5
    )

    info('accessibility {} ({})'.format(np.mean(acc), np.std(acc)))
    # g.vs['accessibility'] = acc
    # plotalpha = 0.8
    plotalpha = 1
    mincolour = 0.3
    acc1 = (acc / np.max(acc)) *  (1 - mincolour)
    colours = [ [mincolour, mincolour, mincolour + c, plotalpha] for c in acc1 ]
    coords = [(float(x), -float(y)) for x, y in zip(g.vs['x'], g.vs['y'])]

    visual['vertex_size'] = 0.0
    visual['edge_width'] = 1
    igraph.plot(g, os.path.join(args.outdir, 'skel.png'),
            layout=coords, **visual)

    visual['vertex_size'] = 2.0
    visual['edge_width'] = 0
    igraph.plot(g, os.path.join(args.outdir, 'acc_all.png'),
            layout=coords, vertex_color=colours, **visual)

    ###########################################################
    # generate plots for diff levels
    for thresh in [0.35, 0.50, 0.75]:
        acc1 = np.ones(len(acc))
        quantile = thresh * np.max(acc)
        info('accessibility quantile: {:.2f} ({}%)'.format(quantile,
                int(thresh*100)))
        inds = np.where(acc > quantile)
        acc1[inds] = 0

        colours = [ [c, c, c, plotalpha] for c in acc1 ]
        visual['vertex_size'] = 2.0
        visual['edge_width'] = 0
        gpath = os.path.join(args.outdir, 'acc_thresh_{:.02f}.png'.format(thresh))
        igraph.plot(g, gpath, layout=coords, vertex_color=colours, **visual)
    
###########################################################
if __name__ == "__main__":
    main()

